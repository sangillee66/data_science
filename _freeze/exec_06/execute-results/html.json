{
  "hash": "cf05df99caa5339a0820003975039a34",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"시각화하기\"\nauthor: 이상일(서울대학교 지리교육과)\ndate-modified: last-modified\nnumber-sections: true\nformat: \n  html: \n    toc: true\ncode-link: true\ncode-copy: true\nexecute: \n  warning: false\n  error: false\n  freeze: auto\nlightbox: true\neditor: visual\nbibliography: references.bib\neditor_options: \n  chunk_output_type: console\n---\n\n## 개요 {.unnumbered}\n\n여기서는 R로 데이터사이언스를 하는 과정 중 데이터 시각화하기(visualizing)를 다룬다. @fig-6-1 에 나타나 있는 것처럼, 시각화하기는 데이터사이언스 프로세스 중 핵심적인 분석 부분의 구성요소이다. 데이터 변형과 데이터 시각화를 합쳐 데이터 탐색이라 부르기도 한다.\n\n![데이터사이언스 프로세스와 시각화(<https://r4ds.hadley.nz/visualize.html>)](images/data_science_process_visualize-01.png){#fig-6-1}\n\n데이터 시각화하기는 [**tidyverse**](https://www.tidyverse.org/)의 핵심 패키지 중의 하나인 [**ggplot2**](https://ggplot2.tidyverse.org/) 에서 제공된다. [**ggplot2**](https://ggplot2.tidyverse.org/)의 `gg`가 '그래프의 문법(grammar of graphic)'을 의미하는 것에서 알 수 있는 것처럼, [**ggplot2**](https://ggplot2.tidyverse.org/)는 그래프 제작의 일반 원리를 정교하게 구현하기 위해 만들어졌다. @fig-ggplot2-layers 에서 보는 것처럼, 모든 그래프는 8개의 주요 구성 요소로 이루어져 있고, [**ggplot2**](https://ggplot2.tidyverse.org/)는 각각의 구성 요소를 마치 레이어(layer)를 쌓는 것과 같은 방식으로 구현한다(`+` 연산자, 즉 레이어 추가 연산자 사용).\n\n![그래프의 8대 구성 요소(<https://initiation.doana-r.com/06-ggplot2#1>)](images/clipboard-3014854163.png){#fig-ggplot2-layers}\n\n우선 [**tidyverse**](https://www.tidyverse.org/) 패키지를 불러온다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n실습을 위해 [**ggplot2**](https://ggplot2.tidyverse.org/) 패키지 속에 포함되어 있는 `mpg` 데이터와 `diamonds` 데이터를 사용한다. `mpg` 데이터의 11개 변수 중 다음의 세 가지 변수가 특히 중요한데, `displ`는 자동차의 엔진 크기이고, `hwy`는 고속도로 연비, `class`는 자동차의 유형이다. `diamond` 데이터는 총 54,000개의 다이아몬드에 대한 정보를 담고 있는데, 특히 가격(`price`) 캐럿(`carat`), 컬러(`color`), 투명도(`clarity`), 컷(`cut`)이 중요한 변수들이다.\n\n## 핵심 구성 요소: 시각속성과 기하객체\n\n이 8개 구성 요소 중 가장 중요한 것은 '시각속성(aesthetics)'과 '기하객체(geometric objects)'이다. 기하객체가 그래프의 전체 구조 혹은 형식을 규정하는 것이라면, 시각속성은 기하객체의 외견을 규정한다. 결국 기하객체는 그래프의 유형(예: 막대 그래프, 산포도 등)과 관련되고, 시각속성은 플롯의 그래픽 속성(예: 컬러, 크기, 모양 등) 혹은 시각 변수(visual variable)과 관련된다. 이 두 가지는 독립적인 요소이지만, 어느 정도는 관련되어 있기도 하다. 특정한 기하객체는 오로지 특정한 시각속성과만 결합한다. 예를 들어 포인트 기하 객체(`geom_point()`)는 크기(`size`) 시각속성과 관련되지만, 라인 기하객체(`geom_line()`)는 크기 시각속성과는 관련되지 않고 라인폭(`linewidth`) 시각속성과만 관련되는 식이다.\n\n### 시각속성\n\n시각속성 매핑(aesthetic mapping)이란 특정한 시각속성 혹은 시각변수를 특정한 변수에 부여하는 과정을 의미한다. 이것을 통해 해당 변수의 변동(값의 다양성)을 효과적으로 나타낼 수 있다. 변수는 다양한 값으로 구성되어 있고, 그 값들이 보여주는 다양성을 시각적으로 드러내야 한다. 정성적 변수인 경우는 범주적 차이를 표현해야 하고, 정량적 변수인 경우는 수치적 차이를 표현해야 한다. 여기서 중요한 것은 어떤 시각속성은 정성적 변수와 관련되고, 다른 시각속성은 정량적 변수와 관련된다는 점이다. 시각속성은 `aes()` 함수를 통해 나타내며, '시각속성 = 변수'의 형태로 지정된다. 당연히 여러 개의 시각속성이 동시에 사용될 수 있고, `aes()` 함수 내에서 콤마로 구분된다. `aes()`는 두 곳에 지정할 수 있는데, 최상위 함수인 `ggplot()` 속에 지정하면 '글로벌' 지정이, 특정한 `geom_*()` 속에 지정하면 '로컬' 지정이 된다. 둘의 차이는 뒤에서 살펴본다. [**ggplot2**](https://ggplot2.tidyverse.org/) 패키지가 제공하는 시각속성이 @tbl-aes 에 정리되어 있다.\n\n+----------------+---------------------+--------------------------------------+----------------+\n| 분류           | 시각속성            | 설명                                 | 성격           |\n+================+=====================+======================================+================+\n| 컬러 관련      | `aes(color = )`     | 점/선의 컬러 지정                    | 정성 \\> 정량   |\n+----------------+---------------------+--------------------------------------+----------------+\n|                | `aes(fill = )`      | 역/면의 필(컬러) 지정                | 정성 \\> 정량   |\n+----------------+---------------------+--------------------------------------+----------------+\n|                | `aes(alpha = )`     | 점/선/역/면의 투명도 지정            | 정성 \\< 정량   |\n+----------------+---------------------+--------------------------------------+----------------+\n| 차이 표현 관련 | `aes(size = )`      | 점의 크기 지정                       | 정량           |\n+----------------+---------------------+--------------------------------------+----------------+\n|                | `aes(shape = )`     | 점의 모양 지정                       | 정성           |\n+----------------+---------------------+--------------------------------------+----------------+\n|                | `aes(linetype = )`  | 선의 유형 지정                       | 정성           |\n+----------------+---------------------+--------------------------------------+----------------+\n|                | `aes(linewidth = )` | 선의 크기 지정                       | 정량           |\n+----------------+---------------------+--------------------------------------+----------------+\n| 위치 관련      | `aes(x = )`         | x축 지정                             | 정성/정량      |\n+----------------+---------------------+--------------------------------------+----------------+\n|                | `aes(y = )`         | y축 지정                             | 정성/정량      |\n+----------------+---------------------+--------------------------------------+----------------+\n| 그룹화 관련    | `aes(group = )`     | 데이터를 묶는 기준(그룹화 기준) 지정 | 정성           |\n+----------------+---------------------+--------------------------------------+----------------+\n\n: 시각속성 유형 {#tbl-aes}\n\n::: callout-note\n위치 관련 시각속성에 `xmin`, `ymin`, `xmax`, `ymax`, `xend`, `yend` 등도 있다. 그러나 이것은 변수와 관련되지 않고 도형의 위치나 크기를 정의하는 좌표 매핑용으로만 사용된다. `aes()` 속에서 정의되기 때문에 시각속성이라 할 수는 있으나, 엄밀한 의미에서는 일종의 매개변수에 해당한다.\n:::\n\n동일한 기하객체의 시각화에서 시각속성의 선택이 어떤 영향을 미치는지를 살펴본다. 산점도 기하객체(`geom_point()`)를 통해 `displ`과 `hwy`의 관계가 `class`에 따라 어떻게 달라지는지를 시각화한다. 다음의 두 그래프를 비교해 본다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = displ, y = hwy, color = class)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![시각속성: 컬러](exec_06_files/figure-html/fig-aesthetic-color-1.png){#fig-aesthetic-color width=672}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = displ, y = hwy, shape = class)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![시각속성: 형태](exec_06_files/figure-html/fig-aesthetic-shape-1.png){#fig-aesthetic-shape width=672}\n:::\n:::\n\n\n@fig-aesthetic-color 과 @fig-aesthetic-shape 중 어느 것이 더 효과적이라고 판단하는가? 컬러(`color`)와 형태(`shape`)라는 시각속성 외에 크기(`size`)와 투명도(`alpha`) 속성을 동일한 데이터에 적용해 본다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = displ, y = hwy, size = class)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![심미성: 크기](exec_06_files/figure-html/fig-aesthetic-size-1.png){#fig-aesthetic-size width=672}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = displ, y = hwy, alpha = class)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![심미성: 투명도](exec_06_files/figure-html/fig-aesthetic-alpha-1.png){#fig-aesthetic-alpha width=672}\n:::\n:::\n\n\n크기와 투명도는 정량적 차이를 나타내는데 적합한 시각속성이기 때문에 `class`라는 정성적 범주의 차이를 보여주는데는 적합하지 않다. 시각속성 부여에서 가장 중요한 것은 결국 해당 시각속성이 주어진 데이터에 얼마나 부합하느냐에 달려있다.\n\n### 기하객체\n\n기하객체는 그래프의 전체 구조 혹은 형식을 규정하며, 일반적으로 그래프의 유형으로 이해할 수 있다. [**ggplot2**](https://ggplot2.tidyverse.org/) 패키지는 매우 다양한 형태의 기하객체를 제공하며, `geom_*()` 함수의 형태를 띤다. `geom_*()` 함수 속에 `aes()`를 지정할 수 있다(로컬 지정). [**ggplot2**](https://ggplot2.tidyverse.org/) 패키지가 제공하는 기하객체가 @tbl-geom 에 정리되어 있다. 가장 빈번하게 사용되는 기하객체에 `geom_point()`, `geom_line()`, `geom_bar()`, `geom_boxplot()`, `geom_histogram()`, `geom_smooth()`, `geom_text()`, `geom_abline()` 등이 있다.\n\n+-------------+-------------+----------------------------+---------------------------+\n| 구분        | 내용        | 기하객체                   | 이름                      |\n+=============+=============+============================+===========================+\n| 기본 플롯   | 점          | `geom_point()`             | 점플롯(산점도)            |\n|             |             |                            |                           |\n|             |             | `geom_jitter()`            | 지터플롯                  |\n|             |             |                            |                           |\n|             |             | `geom_count()`             | 카운트플롯                |\n+-------------+-------------+----------------------------+---------------------------+\n|             | 선          | `geom_line()`              | 선플롯(선그래프)          |\n|             |             |                            |                           |\n|             |             | `geom_path()`              | 경로플롯                  |\n|             |             |                            |                           |\n|             |             | `geom_step()`              | 계단플롯                  |\n+-------------+-------------+----------------------------+---------------------------+\n|             | 역          | `geom_area()`              | 면적플롯                  |\n|             |             |                            |                           |\n|             |             | `geom_ribbon()`            | 리본플롯                  |\n+-------------+-------------+----------------------------+---------------------------+\n|             | 막대        | `geom_bar()`               | 막대플롯                  |\n|             |             |                            |                           |\n|             |             | `geom_col()`               |                           |\n+-------------+-------------+----------------------------+---------------------------+\n| 통계 플롯   | 분포        | `geom_boxplot()`           | 박스플롯                  |\n|             |             |                            |                           |\n|             |             | `geom_density()`           | 밀도플롯                  |\n|             |             |                            |                           |\n|             |             | `geom_dotplot()`           | 도트플롯                  |\n|             |             |                            |                           |\n|             |             | `geom_histogram()`         | 히스토그램                |\n|             |             |                            |                           |\n|             |             | `geom_freqpoly()`          | 빈도다각선플롯            |\n|             |             |                            |                           |\n|             |             | `geom_violin()`            | 바이올린플롯              |\n|             |             |                            |                           |\n|             |             | `geom_rug()`               | 러그플롯                  |\n|             |             |                            |                           |\n|             |             | `geom_qq_line()`           | Q-Q선플롯                 |\n|             |             |                            |                           |\n|             |             | `geom_qq()`                | Q-Q선플롯                 |\n+-------------+-------------+----------------------------+---------------------------+\n|             | 불확실성    | `geom_crossbar()`          | 십자막대플롯              |\n|             |             |                            |                           |\n|             |             | `geom_errorbar()`          | 세로오차막대플롯          |\n|             |             |                            |                           |\n|             |             | `geom_errorbarh()`         | 가로오차막대플롯          |\n|             |             |                            |                           |\n|             |             | `geom_linerange()`         | 선구간플롯                |\n|             |             |                            |                           |\n|             |             | `geom_pointrange()`        | 점선구간플롯              |\n+-------------+-------------+----------------------------+---------------------------+\n|             | 추세선      | `geom_quantile()`          | 분위수회귀플롯            |\n|             |             |                            |                           |\n|             |             | `geom_smooth()`            | 평활곡선플롯              |\n+-------------+-------------+----------------------------+---------------------------+\n| 도형 표현   | 폴리곤      | `geom_polygon()`           | 다각형플롯                |\n+-------------+-------------+----------------------------+---------------------------+\n|             | 선          | `geom_segment()`           | 선분플롯                  |\n|             |             |                            |                           |\n|             |             | `geom_curve()`             | 곡선플롯                  |\n|             |             |                            |                           |\n|             |             | `geom_spoke()`             | 스포크플롯                |\n+-------------+-------------+----------------------------+---------------------------+\n| 2D 플롯     | 빈도        | `geom_bin_2d()`            | 2차원빈플롯               |\n+-------------+-------------+----------------------------+---------------------------+\n|             | 밀도        | `geom_density_2d()`        | 2차원밀도등고선플롯       |\n|             |             |                            |                           |\n|             |             | `geom_density_2d_filled()` | 채워진2차원밀도등고선플롯 |\n+-------------+-------------+----------------------------+---------------------------+\n|             | 등고선      | `geom_contour()`           | 등고선플롯                |\n|             |             |                            |                           |\n|             |             | `geom_contour_filled()`    | 채워진등고선플롯          |\n+-------------+-------------+----------------------------+---------------------------+\n|             | 직사각형    | `geom_raster()`            | 래스터플롯                |\n|             |             |                            |                           |\n|             |             | `geom_rect()`              | 직사각형플롯              |\n|             |             |                            |                           |\n|             |             | `geom_tile()`              | 타일플롯                  |\n+-------------+-------------+----------------------------+---------------------------+\n|             | 육각형      | `geom_hex()`               | 헥스빈플롯                |\n+-------------+-------------+----------------------------+---------------------------+\n| 기타        | 라벨링      | `geom_label()`             | 라벨플롯                  |\n|             |             |                            |                           |\n|             |             | `geom_text()`              | 텍스트플롯                |\n+-------------+-------------+----------------------------+---------------------------+\n|             | 참조선      | `geom_abline()`            | 직선플롯                  |\n|             |             |                            |                           |\n|             |             | `geom_hline()`             | 수평선플롯                |\n|             |             |                            |                           |\n|             |             | `geom_vline()`             | 수직선플롯                |\n+-------------+-------------+----------------------------+---------------------------+\n|             | 지도 제작   | `geom_map()`               | 지도플롯                  |\n|             |             |                            |                           |\n|             |             | `geom_sf()`                | sf플롯                    |\n|             |             |                            |                           |\n|             |             | `geom_sf_label()`          | sf라벨플롯                |\n|             |             |                            |                           |\n|             |             | `geom_sf_text()`           | sf텍스트플롯              |\n+-------------+-------------+----------------------------+---------------------------+\n\n: 기하객체 유형 {#tbl-geom}\n\n@fig-geometric-point 와 @fig-geometric-smooth 이 다르게 보이는 것은 기하객체가 하나는 포인트(`point`)이고 다른 하나는 완만한 선(`smooth`)이기 때문이다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = displ, y = hwy)) + \n  geom_point()\n```\n\n::: {.cell-output-display}\n![기하객체: geom_point()](exec_06_files/figure-html/fig-geometric-point-1.png){#fig-geometric-point width=672}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = displ, y = hwy)) + \n  geom_smooth()\n```\n\n::: {.cell-output-display}\n![기하객체: geom_smooth()](exec_06_files/figure-html/fig-geometric-smooth-1.png){#fig-geometric-smooth width=672}\n:::\n:::\n\n\n@fig-aesthetic-color 과 @fig-geometric-smooth 두 개를 결합해 본다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = displ, y = hwy, color = class)) + \n  geom_point() + \n  geom_smooth()\n```\n\n::: {.cell-output-display}\n![기하객체: geom_point() + geom_smooth() 1](exec_06_files/figure-html/fig-geometric-point-smooth-1-1.png){#fig-geometric-point-smooth-1 width=672}\n:::\n:::\n\n\n원하는 것이 아니다. 왜 이런 결과가 나왔으며, 어떻게 하면 원하는 것을 얻을 수 있을지 생각해 본다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = displ, y = hwy)) + \n  geom_point(aes(color = class)) + \n  geom_smooth()\n```\n\n::: {.cell-output-display}\n![기하객체: geom_point() + geom_smooth() 2](exec_06_files/figure-html/fig-geometric-point-smooth-2-1.png){#fig-geometric-point-smooth-2 width=672}\n:::\n:::\n\n\n두 결과의 차이는 `color` 시각속성을 글로벌하게 적용하느냐 로컬하게 적용하느냐(포인트 기하객체에만 적용)에 달린 것이다. 글로벌 시각속성은 `ggplot()`속에서 지정하고, 로컬 시각속성은 개별 기하객체(`geom_point()`) 속에서 지정한다.\n\n다양한 기하객체는 동일한 데이터를 다양한 방식으로 탐색할 수 있게 해준다. 다음의 세가지 기하객체는 탐색적 데이터 분석에서 널리 사용되는 것이다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = hwy)) +\n  geom_histogram(binwidth = 2)\n```\n\n::: {.cell-output-display}\n![기하객체: geom_histogram()](exec_06_files/figure-html/fig-geometric-histogram-1-1.png){#fig-geometric-histogram-1 width=672}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = hwy)) +\n  geom_density()\n```\n\n::: {.cell-output-display}\n![기하객체: geom_density()](exec_06_files/figure-html/fig-geometric-density-1-1.png){#fig-geometric-density-1 width=672}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = hwy)) +\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![기하객체: geom_boxplot()](exec_06_files/figure-html/fig-geometric-boxplot-1-1.png){#fig-geometric-boxplot-1 width=672}\n:::\n:::\n\n\n## 여타 구성 요소\n\n### 데이터\n\n데이터는 시각화의 가장 기본적인 요소로, 주로 최상위 함수인 `ggplot()` 속에서 `data` 인수로 지정된다. 그러나 개별 기하객체 속에서도 `data` 인수로 지정될 수 있다. 보통의 경우라면, `ggplot()` 함수나 특정한 `geom_*()` 함수 속에서 단일한 데이터 프레임이 한 번 지정되지만, 두 함수에 서로 다른 데이터 프레임이 지정될 수 있고, 또 다른 기하객체 속에 또 다른 데이터 프레임이 지정될 수도 있다.\n\n### 스케일\n\n스케일(scales)은 시각속성 매핑이 구체적으로 어떻게 구현될지를 결정한다. 예를 들어 컬러 시각속성이 적용되었다 하더라도 어떤 컬러가 선정되어 어떻게 배열되는지에 따라 최종 그래프의 모습은 매우 달라질 수 있다. 그러므로 스케일은 시각속성과 불가분의 관계에 있다. [**ggplot2**](https://ggplot2.tidyverse.org/) 패키지가 제공하는 스케일이 @tbl-scale 에 정리되어 있다. 많이 사용되는 스케일에 `scale_color_brewer()`, `scale_color_viridis_c()`, `scale_x_continous()`, `scale_x_discrete()`, `scale_y_continous()`, `scale_y_discrete()` 등이 있다.\n\n+----------------+--------------------------+----------------------------------------------------------------+\n| 분류           | 시각속성                 | 스케일                                                         |\n+================+==========================+================================================================+\n| 컬러 관련      | `color` / `fill`         | `scale_color_identity()` / `scale_fill_identity()`             |\n|                |                          |                                                                |\n|                |                          | `scale_color_gradient()` / `scale_fill_gradient()`             |\n|                |                          |                                                                |\n|                |                          | `scale_color_gradient2()` / `scale_fill_gradient2()`           |\n|                |                          |                                                                |\n|                |                          | `scale_color_gradientn()` / `scale_fill_gradientn()`           |\n|                |                          |                                                                |\n|                |                          | `scale_color_brewer()` / `scale_fill_brewer()`                 |\n|                |                          |                                                                |\n|                |                          | `scale_color_distiller()` / `scale_fill_distiller()`           |\n|                |                          |                                                                |\n|                |                          | `scale_color_fermenter()` / `scale_fill_fermenter()`           |\n|                |                          |                                                                |\n|                |                          | `scale_color_viridis_d()` / `scale_fill_viridis_d()`           |\n|                |                          |                                                                |\n|                |                          | `scale_color_viridis_c()` / `scale_fill_viridis_c()`           |\n|                |                          |                                                                |\n|                |                          | `scale_color_viridis_b()` / `scale_fill_viridis_b()`           |\n|                |                          |                                                                |\n|                |                          | `scale_color_grey()` / `scale_fill_grey()`                     |\n|                |                          |                                                                |\n|                |                          | `scale_color_hue()` / `scale_fill_hue()`                       |\n|                |                          |                                                                |\n|                |                          | `scale_color_steps()` / `scale_fill_steps()`                   |\n|                |                          |                                                                |\n|                |                          | `scale_color_steps2()` / `scale_fill_steps2()`                 |\n|                |                          |                                                                |\n|                |                          | `scale_color_stepsn()` / `scale_fill_stepsn()`                 |\n|                |                          |                                                                |\n|                |                          | `scale_color_manual()` / `scale_fill_manual()`                 |\n+----------------+--------------------------+----------------------------------------------------------------+\n|                | `alpha`                  | `scale_alpha()`                                                |\n|                |                          |                                                                |\n|                |                          | `scale_alpha_continuous()`                                     |\n|                |                          |                                                                |\n|                |                          | `scale_alpha_discrete()`                                       |\n|                |                          |                                                                |\n|                |                          | `scale_alpha_binned()`                                         |\n|                |                          |                                                                |\n|                |                          | `scale_alpha_ordinal()`                                        |\n|                |                          |                                                                |\n|                |                          | `scale_alpha_manual()`                                         |\n+----------------+--------------------------+----------------------------------------------------------------+\n| 차이 표현 관련 | `size`                   | `scale_size()`                                                 |\n|                |                          |                                                                |\n|                |                          | `scale_size_area()`                                            |\n|                |                          |                                                                |\n|                |                          | `scale_size_binned()`                                          |\n|                |                          |                                                                |\n|                |                          | `scale_size_binned_area()`                                     |\n|                |                          |                                                                |\n|                |                          | `scale_radius()`                                               |\n|                |                          |                                                                |\n|                |                          | `scale_size_manual()`                                          |\n+----------------+--------------------------+----------------------------------------------------------------+\n|                | `shape`                  | `scale_shape()`                                                |\n|                |                          |                                                                |\n|                |                          | `scale_shape_binned()`                                         |\n|                |                          |                                                                |\n|                |                          | `scale_shape_manual()`                                         |\n+----------------+--------------------------+----------------------------------------------------------------+\n|                | `linetype` / `linewidth` | `scale_linetype()` / `scale_linewidth()`                       |\n|                |                          |                                                                |\n|                |                          | `scale_linetype_identity()` / `scale_linewidth_identity()`     |\n|                |                          |                                                                |\n|                |                          | `scale_linetype_continuous()` / `scale_linewidth_continuous()` |\n|                |                          |                                                                |\n|                |                          | `scale_linetype_discrete()` / `scale_linewidth_discrete()`     |\n|                |                          |                                                                |\n|                |                          | `scale_linetype_binned()` / `scale_linewidth_binned()`         |\n+----------------+--------------------------+----------------------------------------------------------------+\n| 위치 관련      | `x` / `y`                | `scale_x_continuous()` / `scale_y_continuous()`                |\n|                |                          |                                                                |\n|                |                          | `scale_x_discrete()` / `scale_y_discrete()`                    |\n|                |                          |                                                                |\n|                |                          | `scale_x_binned()` / `scale_y_binned()`                        |\n|                |                          |                                                                |\n|                |                          | `scale_x_log10()` / `scale_y_log10()`                          |\n|                |                          |                                                                |\n|                |                          | `scale_x_reverse()` / `scale_y_reverse()`                      |\n|                |                          |                                                                |\n|                |                          | `scale_x_sqrt()` / `scale_y_sqrt()`                            |\n|                |                          |                                                                |\n|                |                          | `scale_x_date()` / `scale_y_date()`                            |\n|                |                          |                                                                |\n|                |                          | `scale_x_datetime()` / `scale_y_datetime()`                    |\n+----------------+--------------------------+----------------------------------------------------------------+\n\n: 스케일 유형 {#tbl-scale tbl-colwidths=\"\\[18, 15, 67\\]\"}\n\n그래프를 다시 살펴본다. 스케일이 어느 부분에 어떻게 적용되었는지 생각해 본다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = displ, y = hwy, color = drv)) +\n  geom_point() \n```\n\n::: {.cell-output-display}\n![스케일 설정: 기본값](exec_06_files/figure-html/fig-scale-1-1.png){#fig-scale-1 width=672}\n:::\n:::\n\n\n@fig-scale-1 은 아래에서 보는 것처럼, `ggplot2`가 자동적으로 적용한 세 가지의 스케일 설정에 의거해 만들어진 것이다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = displ, y = hwy, color = drv)) +\n  geom_point() +\n  scale_x_continuous() +\n  scale_y_continuous() +\n  scale_color_discrete()\n```\n:::\n\n\n수정하여 다음과 같이 적용할 수 있다. `scale` 함수의 각 인수가 어떤 역할을 하는지 생각해 본다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = displ, y = hwy, color = drv)) +\n  geom_point() +\n  scale_x_continuous(labels = NULL) +\n  scale_y_continuous(breaks = seq(15, 40, by = 5)) +\n  scale_color_brewer(palette = \"Set1\", labels = c(\"4\" = \"4-wheel\", \"f\" = \"front\", \"r\" = \"rear\"))\n```\n\n::: {.cell-output-display}\n![스케일 설정: 수정](exec_06_files/figure-html/fig-scale-3-1.png){#fig-scale-3 width=672}\n:::\n:::\n\n\n`scale_color_brewer()` 함수는 [ColorBrewer](https://colorbrewer2.org/#type=sequential&scheme=BuGn&n=3) 컬러 스케일을 사용한 것인데 익히고 있으면 많은 도움이 된다. 여기에는 다양한 색배열(color schemes)이 제시되어 있는데, 이것을 [**ggplot2**](https://ggplot2.tidyverse.org/) 패키지에서는 팔레트(palette)라고 부른다. @fig-colorbrewer 에는 다양한 브루어 컬러 팔레트가 제시되어 있는 데 왼편의 문자가 팔레트의 이름이고(예: YlOrRd), `scale_color_brewer()` 함수 속에 막바로 사용가능하다. 첫번째 군은 정량적 팔레트 중 순차형(sequential) 팔레트들이고, 두번째 군은 정성적 혹은 범주형(categorical) 팔레트들이고, 세번째 군은 정량적 팔레트 중 분기형(diverging) 팔레트들이다. 변수의 성격에 가장 적절한 팔레트를 선택하는 것이 관건이다.\n\n[![ColorBrewer(\\<http://colorbrewer2.org/\\>)](images/clipboard-3192265517.png){#fig-colorbrewer}](http://colorbrewer2.org/)\n\n자신만의 팔레트를 적용할 수도 있다. [`scale_color_brewer()`](https://ggplot2.tidyverse.org/reference/scale_brewer.html) 대신 [`scale_color_manual()`](https://ggplot2.tidyverse.org/reference/scale_manual.html) 함수를 사용하면 된다. 또한 RGB 색상에 대한 HTML 헥스 코드( html hex code)를 사용해도 되고, R에서 부여한 657개의 이름 중에서 골라 사용해도 된다. 색상 이름 및 헥스 코드는 [다음 사이트](https://rstudio-pubs-static.s3.amazonaws.com/3486_79191ad32cf74955b4502b8530aad627.html)를 참고하라.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = displ, y = hwy, color = drv)) +\n  geom_point() +\n  scale_x_continuous(labels = NULL) +\n  scale_y_continuous(breaks = seq(15, 40, by = 5)) +\n  scale_color_manual(values = c(\"sienna1\", \"slateblue4\", \"#698B22\"))\n```\n\n::: {.cell-output-display}\n![스케일 설정: 색상 수정](exec_06_files/figure-html/fig-scale-4-1.png){#fig-scale-4 width=672}\n:::\n:::\n\n\n### 패싯\n\n패싯(facets) 레이어는 다면생성(faceting) 과정을 통해 하나의 플롯을 여러개의 하위 플롯으로 쪼갬으로서 생성된다. `facet_wrap()` 함수가 핵심이다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = displ, y = hwy)) + \n  geom_point() + \n  facet_wrap(~cyl)\n```\n\n::: {.cell-output-display}\n![패싯: facet_wrap()](exec_06_files/figure-html/fig-facet-1-1.png){#fig-facet-1 width=672}\n:::\n:::\n\n\n두 개의 변수에 의거해 패싯을 생성할 수도 있다. `facet_wrap()` 함수 대신 `facet_grid()` 함수가 적용된다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = displ, y = hwy)) + \n  geom_point() + \n  facet_grid(drv ~ cyl)\n```\n\n::: {.cell-output-display}\n![패싯: facet_grid()](exec_06_files/figure-html/fig-facet-2-1.png){#fig-facet-2 width=672}\n:::\n:::\n\n\n### 통계적 변환\n\n어떤 시각화 과정은 필연적으로 통계적 변환(statistical transformation)을 수반한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(diamonds, aes(x = cut)) + \n  geom_bar()\n```\n\n::: {.cell-output-display}\n![통계적 변환: geom_bar()](exec_06_files/figure-html/fig-stat-1-1.png){#fig-stat-1 width=672}\n:::\n:::\n\n\n@fig-stat-1 는 @fig-stat-2 에서 보는 바와 같이, 원데이터로부터 빈도를 계산(통계적 전환)하고 그것을 그래프로 변환한다.\n\n![통계적 변환: geom_bar()의 경우(<https://r4ds.hadley.nz/layers>)](https://r4ds.hadley.nz/images/visualization-stat-bar.png){#fig-stat-2}\n\n모든 `geom_*()`은 통계적 변환에 대한 인수인 `stat`에 대해 기본값을 가지고 있다. `geom_bar()`의 통계적 변환의 기본값은 `stat = count` 이다. 단일 변수에 대해 빈도 분포에 대한 막대 그래프를 작성할 때는 이 기본값이 잘 작동한다. 그런데, `geom_bar()`에 단일 변수가 아니라 두 개의 변수가 시각속성에 적용되는 경우(한 변수는 x축에 위치하는 범주 변수, 또 다른 변수는 해당 범주별 빈도값), 적절한 통계적 변환의 유형은 `count`가 아니라 `identity`이다. 따라서 이 경우에는 따라 `stat = \"identity\"`를 반드시 따로 지정해 주어야 한다. 그렇지 않으면 원하는 결과를 얻을 수 없다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds |>\n  count(cut) |> \n  ggplot(aes(x = cut, y = n)) +\n  geom_bar(stat = \"identity\")\n```\n\n::: {.cell-output-display}\n![통계적 변환: geom_bar()에 stat = identity 지정](exec_06_files/figure-html/fig-stat-3-1.png){#fig-stat-3 width=672}\n:::\n:::\n\n\n그런데 `geom_bar()`와 유사한 `geom_col()`이라는 함수를 사용해도 동일한 결과를 얻을 수 있다. `geom_col()`에서는 통계적 변환의 기본값이 `count`가 아니라 `identity`이기 때문에 위와 달리 `stat = \"identity\"`를 따로 지정할 필요가 없다. 결국 단일 변수에 대한 빈도 분포를 나타내고 싶으면 `geom_bar()`를, 두 변수를 이용해 빈도 분포를 나타내고 싶으면 `geom_col()`을 사용하면 된다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds |>\n  count(cut) |> \n  ggplot(aes(x = cut, y = n)) +\n  geom_col()\n```\n\n::: {.cell-output-display}\n![통계적 변환: geom_col()](exec_06_files/figure-html/fig-stat-4-1.png){#fig-stat-4 width=672}\n:::\n:::\n\n\n`after_stat()`이라고 하는 보조 함수를 사용하면, 이 그래프를 절대 빈도가 아닌 상대 빈도 그래프로 변환할 수 있다. 이 역시 통계적 변환 과정이 이면에 숨어 있다. `group` 인수가 매우 중요하다. 이것을 지정하지 않으면 개별 `cut`별로 계산하기 때문에 모든 막대가 1이 된다. `group = 1`로 지정했다는 것은 `cut`에 관계 없이 모두를 한 덩어리로 생각하고 비중을 구한다는 것을 의미한다. 사실 1이 아니라 어떤 다른 숫자여도 상관이 없다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(diamonds, aes(x = cut, y = after_stat(prop), group = 1)) + \n  geom_bar()\n```\n\n::: {.cell-output-display}\n![통계적 변환: geom_bar()에 after_stat() 지정](exec_06_files/figure-html/fig-stat-5-1.png){#fig-stat-5 width=672}\n:::\n:::\n\n\n막대 그래프에 시각속성을 가미하고, `position` 인수를 통한 위치 조정(position adjustment)을 시도한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = drv, fill = class)) + \n  geom_bar()\n```\n\n::: {.cell-output-display}\n![position: stack](exec_06_files/figure-html/fig-bar-fill-1-1.png){#fig-bar-fill-1 width=672}\n:::\n:::\n\n\n기하객체에 색상을 지정하고 싶을 때, 0차원(`point`)과 1차원(`line`) 객체에는 `color`라는 시각속성을 적용하지만, 막대 그래프와 같은 2차원(`area`) 객체에는 `fill`이라는 시각속성을 적용한다. 자주 혼돈이 되는 부분이다.\n\n위치 조정을 위해 `position` 인수를 사용하는데, 네 가지 옵션이 있다.\n\n-   `position = \"stack\"` : 누적 배치. 같은 x축 범주에 속한 여러 집단의 값을 위로 쌓아 올려 표현한다. 전체 합계와 그룹별 비중을 한눈에 보기 쉽다.\n\n-   `position = \"identity\"`: 원자료 그대로 배치. 겹치면 그대로 덮어써서 보이게 된다. 투명도를 조정하지 않으면 겹침 현상 때문에 해석이 어렵다.\n\n-   `position = \"dodge\"`: 옆으로 나란히 배치. 같은 x축 범주에 속한 여러 집단을 옆으로 나란히 분리하여 표현하는데, 그룹 간 비교에 적합하다.\n\n-   `position = \"fill\"`: 누적 비율 배치. `\"stack\"`과 마찬가지로 쌓되, 전체 높이를 항상 1(100%)에 맞춰 상대적 비율만 보여준다. 전체 규모가 아니라 구성비(비율) 비교에 적합하다.\n\n@fig-bar-fill-1 에는 기본값으로 `position = \"stack\"`이 적용된 것이다. @fig-bar-fill-2 는 `position = \"dodge\"`를 적용한 것이다 .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = drv, fill = class)) + \n  geom_bar(position = \"identity\", alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![position: identity](exec_06_files/figure-html/fig-bar-fill-2-1.png){#fig-bar-fill-2 width=672}\n:::\n:::\n\n\n@fig-bar-fill-3 는 `position = \"dodge\"`를 적용한 것이다 .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = drv, fill = class)) + \n  geom_bar(position = \"dodge\")\n```\n\n::: {.cell-output-display}\n![position: dodge](exec_06_files/figure-html/fig-bar-fill-3-1.png){#fig-bar-fill-3 width=672}\n:::\n:::\n\n\n@fig-bar-fill-4 는 `position = \"fill\"`을 적용한 것이다 .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = drv, fill = class)) + \n  geom_bar(position = \"fill\")\n```\n\n::: {.cell-output-display}\n![position: fill](exec_06_files/figure-html/fig-bar-fill-4-1.png){#fig-bar-fill-4 width=672}\n:::\n:::\n\n\n### 좌표\n\n좌표(coordinates) 혹은 좌표계(coordinate systems)는 그래픽 요소들의 위치 결정에 기준이 되는 준거체계이다. 특히 두 가지가 함수가 유용하다. `coord_flip()` 함수는 축을 전환한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = drv, fill = class)) + \n  geom_bar(position = \"fill\") +\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![coord_clip() 함수](exec_06_files/figure-html/fig-coordinates-1-1.png){#fig-coordinates-1 width=672}\n:::\n:::\n\n\n`coord_fixed()` 함수는 두 축의 스케일을 절대화하여 동일하게 적용한다. x-축의 10 간격이 y-축의 10 간격과 동일하다. 이것을 적용하지 않으면 x-축이 길어지기 때문에 절대적 비교를 할 수 없게 된다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(cty, hwy)) +\n  geom_point() +\n  coord_fixed()\n```\n\n::: {.cell-output-display}\n![coord_fixed() 함수](exec_06_files/figure-html/fig-coordinates-2-1.png){#fig-coordinates-2 width=672}\n:::\n:::\n\n\n### 테마\n\n테마(themes)는 그래프의 외양에 영향을 끼치는 또 다른 요소이다. 우선, 전체적인 외양을 한꺼번에 바꿀 수 있다. [**ggplot2**](https://ggplot2.tidyverse.org/)는 @fig-ggplot2-themes-1 에서 보는 처럼 모두 8가지 기본 테마를 제공한다.\n\n![**ggplot2**가 제공하는 테마(<https://r4ds.hadley.nz/communication>)](https://r4ds.hadley.nz/images/visualization-themes.png){#fig-ggplot2-themes-1}\n\n기본값인 회색빛 배경이 마음에 들지 않았다면 @fig-ggplot-themes-2 처럼 흑백 테마(`theme_bw()`)를 적용할 수도 있다. 다른 테마도 적용해 보고 그 차이를 알아본다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_point(aes(color = class)) +\n  geom_smooth(se = FALSE) +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![theme_bw() 테마의 지정](exec_06_files/figure-html/fig-ggplot-themes-2-1.png){#fig-ggplot-themes-2 width=672}\n:::\n:::\n\n\n이렇게 한꺼번에 그래프의 외관을 바꿀 수도 있지만 `theme()` 함수를 통해 그래프의 개별 요소 하나씩을 모두 조정할 수 있다. 중요한 그래픽 요소가 @fig-ggplot-theme 에 나타나 있다.\n\n![**ggplot2** 패키지의 테마 요소(<https://isabella-b.com/blog/ggplot2-theme-elements-reference/>)](images/ggplot_elements2.png){#fig-ggplot-theme}\n\n`theme()` 함수를 통해 수정 가능한 그래픽 요소는 @fig-ggplot-theme 에 나타나 있는 것보다 훨씬 더 많다. 자세한 사항은 [**ggplot2**](https://ggplot2.tidyverse.org/) 패키지의 해당 [웹페이지](https://ggplot2.tidyverse.org/reference/theme.html)를 참고한다.\n\n@fig-ggplot-themes-3 는 몇 가지 요소를 수정한 사례이다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = displ, y = hwy, color = drv)) +\n  geom_point() +\n  labs(\n    title = \"Larger engine sizes tend to have lower fuel economy\",\n    caption = \"Source: https://fueleconomy.gov.\"\n  ) +\n  theme(\n    legend.position = c(0.6, 0.7),\n    legend.direction = \"horizontal\",\n    plot.title = element_text(face = \"bold\"),\n    plot.title.position = \"plot\",\n    plot.caption.position = \"plot\",\n    plot.caption = element_text(hjust = 0)\n  )\n```\n\n::: {.cell-output-display}\n![개별 요소의 수정: theme() 함수](exec_06_files/figure-html/fig-ggplot-themes-3-1.png){#fig-ggplot-themes-3 width=672}\n:::\n:::\n\n\n## 기타 사항\n\n### 라벨과 주석\n\n`lab()` 함수를 활용하면 그래프의 다양한 종류의 라벨을 설정할 수 있다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_point(aes(color = class)) +\n  geom_smooth(se = FALSE) +\n  labs(\n    x = \"Engine displacement (L)\",\n    y = \"Highway fuel economy (mpg)\",\n    color = \"Car type\",\n    title = \"Fuel efficiency generally decreases with engine size\",\n    subtitle = \"Two seaters (sports cars) are an exception because of their light weight\",\n    caption = \"Data from fueleconomy.gov\"\n  )\n```\n\n::: {.cell-output-display}\n![라벨링](exec_06_files/figure-html/fig-ggplot-label-1-1.png){#fig-ggplot-label-1 width=672}\n:::\n:::\n\n\n또 다른 기하객체인 `geom_text()` 혹은 `geom_label()`를 통해 그래프 속에 텍스트를 삽입할 수 있다. 주석이 겹치는 것을 방지하고자 싶다면 [**ggrepel**](https://ggrepel.slowkow.com/) 패키지를 사용하면 된다. 새로운 기하객체인 `geom_label_repel()` 함수가 사용되었는데, `label`이 하나의 시각속성으로 사용되는 것을 알 수 있다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggrepel)\nggplot(mpg, aes(displ, hwy)) + \n  geom_point(colour = \"red\") +\n  geom_label_repel(data = mpg |> slice_sample(prop = 0.1), aes(label = class))\n```\n\n::: {.cell-output-display}\n![라벨링: ggrepel 패키지](exec_06_files/figure-html/fig-ggplot-label-2-1.png){#fig-ggplot-label-2 width=672}\n:::\n:::\n\n\n### 레이아웃\n\n레이아웃(layout)은 복수의 그래프를 적절히 배치하여 하나의 그래픽으로 융합하는 과정을 의미한다. 수 많은 [**ggplot2**](https://ggplot2.tidyverse.org/)의 [확장 패키지(ggplot2 extensions)](https://exts.ggplot2.tidyverse.org/) 중 하나인 [**patchwork**](https://patchwork.data-imaginist.com/) 패키지를 활용하여 자유롭게 레이아웃을 만들 수 있다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(patchwork)\np1 <- ggplot(mpg, aes(x = displ, y = hwy)) + \n  geom_point() + \n  labs(title = \"Plot 1\")\np2 <- ggplot(mpg, aes(x = drv, y = hwy)) + \n  geom_boxplot() + \n  labs(title = \"Plot 2\")\np1 + p2\n```\n\n::: {.cell-output-display}\n![레이아웃: patchwork 패키지](exec_06_files/figure-html/fig-ggplot-patchwork-1-1.png){#fig-ggplot-patchwork-1 width=672}\n:::\n:::\n\n\n### 그래프의 저장\n\n두 가지 방식이 있다.\n\n첫 번째 방식은 Output 창의 Plots 탭에 있는 Export 버턴을 이용하는 것이다. 다양한 그래픽 포맷 뿐만 아니라 pdf 형식으로도 저장할 수 있다.\n\n두 번째 방식은 [**ggplot2**](https://ggplot2.tidyverse.org/) 의 `ggsave()` 함수를 이용하는 것이다. 결과물의 폰트 크기, 가로세로비(aspect ratio), 해상도 등을 종합적으로 고려하여 최적의 세팅값을 찾아야 한다. 자신의 디바이스에 따라 동일한 세팅값이 다른 결과를 산출할 수도 있다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_plot <- ggplot(mpg, aes(x = displ, y = hwy, color = drv)) +\n  geom_point() +\n  labs(\n    title = \"Larger engine sizes tend to have lower fuel economy\",\n    caption = \"Source: https://fueleconomy.gov.\"\n  ) +\n  theme(\n    legend.position = c(0.6, 0.7),\n    legend.direction = \"horizontal\",\n    plot.title = element_text(face = \"bold\"),\n    plot.title.position = \"plot\",\n    plot.caption.position = \"plot\",\n    plot.caption = element_text(hjust = 0)\n  )\nggsave(filename = \"my_plot.jpg\", plot = my_plot, width = 8, height = 8 * 0.618, dpi = 600)\n```\n:::\n\n",
    "supporting": [
      "exec_06_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}