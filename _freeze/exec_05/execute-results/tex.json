{
  "hash": "2f78e7f3c8ad5eeec62b96c423a79950",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"데이터 시각화하기\"\nauthor: 이상일(서울대학교 지리교육과)\ndate-modified: last-modified\nnumber-sections: true\nformat: \n  html: \n    toc: true\n  pdf: default  \ncode-link: true\nexecute: \n  warning: false\n  error: false\n  freeze: auto\neditor: visual\nbibliography: references.bib\n---\n\n\n\n## 실습 개요 {.unnumbered}\n\n이 실습은 R로 데이터사이언스를 하는 과정 중 데이터 시각화하기(visualizing)를 다룬다. 데이터 시각화하기는 [`tidyverse`](https://www.tidyverse.org/)의 핵심 패키지 중의 하나인 [`ggplot2`](https://ggplot2.tidyverse.org/) 에서 제공된다. 모든 실습의 시작은 [`tidyverse`](https://www.tidyverse.org/) 패키지를 불러오는 것이다.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\n이 실습에서는 ggplot2 패키지 속에 포함되어 이쓴 mpg 데이터를 사용한다.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpg\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 234 x 11\n   manufacturer model      displ  year   cyl trans drv     cty   hwy fl    class\n   <chr>        <chr>      <dbl> <int> <int> <chr> <chr> <int> <int> <chr> <chr>\n 1 audi         a4           1.8  1999     4 auto~ f        18    29 p     comp~\n 2 audi         a4           1.8  1999     4 manu~ f        21    29 p     comp~\n 3 audi         a4           2    2008     4 manu~ f        20    31 p     comp~\n 4 audi         a4           2    2008     4 auto~ f        21    30 p     comp~\n 5 audi         a4           2.8  1999     6 auto~ f        16    26 p     comp~\n 6 audi         a4           2.8  1999     6 manu~ f        18    26 p     comp~\n 7 audi         a4           3.1  2008     6 auto~ f        18    27 p     comp~\n 8 audi         a4 quattro   1.8  1999     4 manu~ 4        18    26 p     comp~\n 9 audi         a4 quattro   1.8  1999     4 auto~ 4        16    25 p     comp~\n10 audi         a4 quattro   2    2008     4 manu~ 4        20    28 p     comp~\n# i 224 more rows\n```\n\n\n:::\n:::\n\n\n\n총 11개의 변수 중 다음의 세 가지 변수가 특히 중요하다.\n\n-   `displ`: 자동차의 엔진 크기\n\n-   `hwy`: 고속도로 연비\n\n-   `class`: 자동차의 유형\n\n## 심미성 매핑(aesthetic mappings)\n\n`displ`과 `hwy`의 관계가 `class`에 따라 어떻게 달라지는 지를 시각화한다. 다음의 두 그래프를 비교해 본다.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = displ, y = hwy, color = class)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![심미성 요소: 컬러](exec_05_files/figure-pdf/fig-aesthetic-color-1.pdf){#fig-aesthetic-color fig-pos='H'}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = displ, y = hwy, shape = class)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![심미성 요소: 형태](exec_05_files/figure-pdf/fig-aesthetic-shape-1.pdf){#fig-aesthetic-shape fig-pos='H'}\n:::\n:::\n\n\n\n@fig-aesthetic-color 과 @fig-aesthetic-shape 중 어느 것이 더 효과적인 시각화라고 생각하는가? 컬러(color)와 형태(shape)라는 심미성 요소 외에 크기(size)와 투명도(alpha) 요소를 동일한 데이터에 적용해 본다.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = displ, y = hwy, size = class)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![심미성 요소: 크기](exec_05_files/figure-pdf/fig-aesthetic-size-1.pdf){#fig-aesthetic-size fig-pos='H'}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = displ, y = hwy, alpha = class)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![심미성 요소: 투명도](exec_05_files/figure-pdf/fig-aesthetic-alpha-1.pdf){#fig-aesthetic-alpha fig-pos='H'}\n:::\n:::\n\n\n\n크기와 투명도는 양적인 차이를 나타내는데 보다 적합하기 때문에 `class`라는 정성적인 범주의 차이를 보여주는데는 적합하지 않다. 심미성 매핑에서 가장 중요한 것은 결국 얼마나 적절한 시각 변수(visual variable)를 선택하느냐에 달려 있다.\n\n## 기하 객체(geometric objects)\n\n다음의 두 그래프가 다르게 느껴지는 것은 그래프를 작성하기 위해 동원된 객체의 기하학적 특성이 다르기 때문이다. @fig-geometric-point 와 @fig-geometric-smooth 이 다르게 보이는 것은 기하 객체가 하나는 포인트(`point`)이고 다른 하나는 완만한 선(`smooth`)이기 때문이다.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = displ, y = hwy)) + \n  geom_point()\n```\n\n::: {.cell-output-display}\n![기하 객체: 포인트](exec_05_files/figure-pdf/fig-geometric-point-1.pdf){#fig-geometric-point fig-pos='H'}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = displ, y = hwy)) + \n  geom_smooth()\n```\n\n::: {.cell-output-display}\n![기하 객체: 완선](exec_05_files/figure-pdf/fig-geometric-smooth-1.pdf){#fig-geometric-smooth fig-pos='H'}\n:::\n:::\n\n\n\n@fig-aesthetic-color 과 @fig-geometric-smooth 두 개를 결합해 본다.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = displ, y = hwy, color = class)) + \n  geom_point() + \n  geom_smooth()\n```\n\n::: {.cell-output-display}\n![기하 객체: 포인트 + 완선 1](exec_05_files/figure-pdf/fig-geometric-point-smooth-1-1.pdf){#fig-geometric-point-smooth-1 fig-pos='H'}\n:::\n:::\n\n\n\n원하는 것이 아니다. 왜 이런 결과가 나왔으며, 어떻게 하면 원하는 것을 얻을 수 있을지 생각해 본다.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = displ, y = hwy)) + \n  geom_point(aes(color = class)) + \n  geom_smooth()\n```\n\n::: {.cell-output-display}\n![기하 객체: 포인트 + 완선 2](exec_05_files/figure-pdf/fig-geometric-point-smooth-2-1.pdf){#fig-geometric-point-smooth-2 fig-pos='H'}\n:::\n:::\n\n\n\n두 결과의 차이는 `color` 심미성 요소를 글로벌하게 적용하느냐 로컬하게 적용하느냐(포인트 객체에만 적용)에 달린 것이다. 글로벌한 심미성은 `ggplot()`속에서 설정하고, 국지적인 심미성은 개별 기하 객체 속에서 설정한다. 매우 중요한 사항이니 꼭 기억하도록 한다.\n\n재밌다.\n",
    "supporting": [
      "exec_05_files\\figure-pdf"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": true
  }
}