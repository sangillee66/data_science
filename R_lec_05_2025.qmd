---
title: |
  | [R Lecture 5]{style="color:coral;font-size:0.6em"}   
  | [데이터 변형하기]{style="font-size:1em"} 
author: <br> 이상일(서울대학교 지리교육과 교수)
date: 2025-10-14
format: 
  revealjs:
    logo: snu_edu_1.png
    footer: https://sangillee.snu.ac.kr/
    transition: fade
    transition-speed: fast
    margin: 0.05
    center: false
    # smaller: false
    # scrollable: false
    code-link: true
    code-line-numbers: false
    code-copy: true
    code-overflow: scroll
    slide-number: true
    width: 960 * 1.5
    height: 700 * 1.5
    lightbox: false
    # min-scale: 1
    # max-scale: 1
    pointer:
      pointerSize: 20
      color: red
    menu: true
    embed-resources: false
    theme: [default, custom_hq_pretendard_step.scss] # 슬라이드 본문 폰트 크기 조정
    revealjs-plugins:
      - pointer
    css: styles.css
execute: 
  warning: false
  error: false
  freeze: auto  
dpi: 600
editor: visual
webr: 
  show-startup-message: false     
  packages: []
filters:
  - webr
# suppress-bibliography: true
editor_options: 
  chunk_output_type: console
---

# [개요]{style="color:coral"}

## 데이터사이언스 프로세스

![[https://r4ds.hadley.nz/transform.html](https://r4ds.hadley.nz/transform.html){style="font-size:1.25rem"}](images/data_science_process_transform-02.png)

## 데이터사이언스 프로세스: 타이디버스

![[https://r4ds.hadley.nz/intro.html](https://r4ds.hadley.nz/intro.html){style="font-size:1.25rem"}](images/data_science_process_packages-04.png)

## **dplyr** 패키지

![[https://dplyr.tidyverse.org/](https://dplyr.tidyverse.org/){style="font-size:1.25rem"}](images/clipboard-3059639685.png){fig-align="center"}

## **dplyr** 패키지: 기본 원리

-   함수의 이름은 기본적으로 [**동사**]{style="color:coral"}이다.

-   첫 번째 아규먼트는 항상 [**데이터 프레임**]{style="color:coral"}이다.

-   그 다음 아규먼트(들)는 데이터 변형에 결부되는 [**변수**]{style="color:coral"}(들)를 지정한다 .

-   산출물은 항상 [**데이터 프레임**]{style="color:coral"}이다.

## **dplyr** 패키지: 기능 분류

-   단일 테이블 조작: 데이터 변형하기의 핵심 부분으로, 한 데이터 프레임의 데이터 구조를 조작

-   다중 테이블 결합: 두 개 이상의 데이터 프레임으로 결합

# [단일 테이블 조작]{style="color:coral"}

## **dplyr** 함수의 유형

-   행(rows) 함수: 행에 적용되는 함수, 즉 행의 변화를 야기하는 함수

-   열(columns) 함수: 열에 적용되는 함수, 즉 열의 변화를 야기하는 함수

-   그룹(groups) 함수: 그룹에 적용되는 함수

-   테이블(tables) 함수: 데이터프레임 전체에 적용되는 함수

## 

![[https://kilhwan.github.io/rprogramming/ch-dataTransformation.html](https://kilhwan.github.io/rprogramming/ch-dataTransformation.html){style="font-size:1.25rem"}](images/clipboard-2728894062.png){fig-align="center"}

## 행 함수: 네 개의 주요 함수

-   `filter()`: 특정 변수(들)에 의거한 조건을 만족하는 행(들)을 추출

-   `arrange()`: 특정 변수(들)에 의거해 행(들)의 순서를 변경

-   `distinct()`: 특정 변수(들)에 의거해 (중복을 제거한) 고유한 행(들)을 추출

-   `slice()`: `filter()` 함수처럼 특정 행(들)을 추출

    -   특정 변수와 관계 없이, 행의 위치에 의거해 특정 행(들)을 추출

    -   특정 변수에 따른, 행의 위치에 의거해 행(들)을 추출

## 행 함수 1: `filter()`

![[https://allisonhorst.com/r-packages-functions](https://allisonhorst.com/r-packages-functions){style="font-size:1.25rem"}](images/clipboard-2723506167.png)

## 행 함수 1: `filter()`

![](images/clipboard-565233092.png)

## 행 함수 1: `filter()`

::: panel-tabset
## Data

```{r}
library(tidyverse)
table1
```

## `filter()` 1

```{r}
#| echo: true
filter(table1, year == 2000)

```

## `filter()` 2

```{r}
#| echo: true
table1 |> 
  filter(
    year == 2000 & population > 50000000
  )
```
:::

## 행 함수 2: `arrange()`

![](images/clipboard-3074305878.png)

## 행 함수 2: `arrange()`

::: panel-tabset
## Data

```{r}
table1
```

## `arrange()` 1

```{r}
#| echo: true
arrange(table1, cases)

```

## `arrange()` 2

```{r}
#| echo: true
table1 |> 
  arrange(desc(cases))
```
:::

## 행 함수 3: `distinct()`

![](images/clipboard-3425030843.png)

## 행 함수 3: `distinct()`

::: panel-tabset
## Data

```{r}
table1
```

## `distinct()` 1

```{r}
#| echo: true
distinct(table1, country)

```

## `distinct()` 2

```{r}
#| echo: true
table1 |> 
  distinct(
    country, .keep_all = TRUE
  )
```
:::

## 행 함수 4: `slice()`

![](images/clipboard-1830339037.png)

## 행 함수 4: `slice()`

::: panel-tabset
## Data

```{r}
table1
```

## `slice()`

```{r}
#| echo: true
slice(table1, 2:3)

```

## `slice_head()`

```{r}
#| echo: true
table1 |> 
  slice_head(n = 2)
```

## `slice_tail()`

```{r}
#| echo: true
table1 |> 
  slice_tail(prop = 1/3)
```

## `slice_max()`

```{r}
#| echo: true
table1 |> 
  slice_max(cases, n = 2)
```

## `slice_min()`

```{r}
#| echo: true
table1 |> 
  slice_min(cases, prop = 1/3)
```

## `slice_sample()`

```{r}
#| echo: true
table1 |> 
  slice_sample(n = 2, replace = TRUE)
```
:::

## 열 함수: 네 개의 주요 함수

-   `select()`: 변수(들) 중 일부를 추출

-   `mutate()`: 변수(들)를 변형해 새로운 변수를 생성

-   `rename()`: 변수(들)의 이름을 변경

-   `relocate()`: 변수(들)의 위치(순서)를 변경

## 열 함수 1: `select()`

![](images/clipboard-3651470406.png)

## 열 함수 1: `select()`

::: panel-tabset
## Data

```{r}
table1
```

## `select()` 1

```{r}
#| echo: true
select(table1, country, year)

```

## `select()` 2

```{r}
#| echo: true
table1 |> 
  select(-cases, -population)
```
:::

## 열 함수 2: `mutate()`

![[https://allisonhorst.com/r-packages-functions](https://allisonhorst.com/r-packages-functions){style="font-size:1.25rem"}](images/clipboard-417835741.png){fig-align="center"}

## 열 함수 2: `mutate()`

![](images/clipboard-1943055285.png)

## 열 함수 2: `mutate()`

::: panel-tabset
## Data

```{r}
table1
```

## `mutate()` 1

```{r}
#| echo: true
mutate(table1, rate = cases / population)
```

## `mutate()` 2

```{r}
#| echo: true
table1_new <- table1 |> 
  mutate(
    rate = cases / population,
    continent = if_else(country == "Brazil", "Americas", "Asia")
  )
table1_new
```
:::

## 열 함수 3: `rename()`

![[https://allisonhorst.com/r-packages-functions](https://allisonhorst.com/r-packages-functions){style="font-size:1.25rem"}](images/clipboard-3953189394.png){fig-align="center"}

## 열 함수 3: `rename()`

![](images/clipboard-654990545.png)

## 열 함수 3: `rename()`

::: panel-tabset
## Data

```{r}
table1_new
```

## `rename()` 1

```{r}
#| echo: true
rename(table1_new, cont = continent)
```

## `rename()` 2

```{r}
#| echo: true
table1_new |> 
  rename(
    cont = continent,
    pop = population
  )
```
:::

## 열 함수 4: `relocate()`

![[https://allisonhorst.com/r-packages-functions](https://allisonhorst.com/r-packages-functions){style="font-size:1.25rem"}](images/clipboard-2066290782.png){fig-align="center"}

## 열 함수 4: `relocate()`

![](images/clipboard-1813959402.png)

## 열 함수 4: `relocate()`

::: panel-tabset
## Data

```{r}
table1_new
```

## `relocate()` 1

```{r}
#| echo: true
relocate(table1_new, year, continent)
```

## `relocate()` 2

```{r}
#| echo: true
table1_new |> 
  relocate(
    rate,
    .before = year
  )
```
:::

## 그룹 함수: 네 개의 주요 함수

-   `group_by()`: 변수(들)에 의거해 전체 행(들)을 그룹으로 분할

-   `summarize()`: 그룹별로 변수(들)의 통계량을 산출하여 새로운 변수(들)로 저장

-   `count()`: 그룹별로 해당 관측개체의 빈도수를 계산

-   `across()`: 그룹별로 여러 변수에 걸쳐 동일한 통계량을 산출하고 새로운 변수들로 저장

## 그룹 함수 1: `group_by()`

![](images/clipboard-1542658472.png)

## 그룹 함수 1: `group_by()`

::: panel-tabset
## Data

```{r}
table1_new
```

## `group_by()` 1

```{r}
#| echo: true
group_by(table1_new, continent)
```

## `group_by()` 2

```{r}
#| echo: true
table1_new |> 
  group_by(continent, year)
```
:::

## 그룹 함수 2: `summarize()`

![](images/clipboard-1592063625.png)

## 그룹 함수 2: `summarize()`

::: panel-tabset
## Data

```{r}
table1_new
```

## `summarize()` 1

```{r}
#| echo: true
summarize(table1_new, 
  sum_cases = sum(cases)
  )
```

## `summarize()` 2

```{r}
#| echo: true
table1_new |> 
  summarize(
    sum_cases = sum(cases), 
    mean_rate = mean(rate)
  )
```
:::

## 그룹 함수 1 + 2: `group_by()` + `summarize()`

![](images/clipboard-1318711495.png)

## 그룹 함수 1 + 2: `group_by()` + `summarize()`

::: panel-tabset
## Data

```{r}
table1_new
```

## Combination 1

```{r}
#| echo: true

table1_new_group <- group_by(table1_new, continent, year)
summarize(table1_new_group, 
  sum_cases = sum(cases),
  mean_rate = mean(rate)
)
```

## Combination 2

```{r}
#| echo: true
table1_new |> 
  group_by(continent, year) |> 
  summarize(
    sum_cases = sum(cases), 
    sum_pop = sum(population)
  ) |> 
  mutate(
    rate = sum_cases / sum_pop
  ) |> 
  ungroup()
```
:::

## 그룹 함수 3: `count()`

![](images/clipboard-2066641215.png)

## 그룹 함수 3: `count()`

::: panel-tabset
## Data

```{r}
table1_new
```

## `count()` 1

```{r}
#| echo: true
count(table1_new, year, continent)
```

## `count()` 2

```{r}
#| echo: true
table1_new |> 
  count(year, continent, wt = cases)
```

## `count()` 3

```{r}
#| echo: true
table1_new |> 
  group_by(year, continent) |> 
  summarize(
    cases_n = n(),
    cases_sum = sum(cases)
  )
```
:::

## 그룹 함수 4: `across()`

![[https://allisonhorst.com/r-packages-functions](https://allisonhorst.com/r-packages-functions){style="font-size:1.25rem"}](images/clipboard-2406373084.png){fig-align="center"}

## 그룹 함수 4: `across()`

::: panel-tabset
## Data

```{r}
table1_new
```

## `across()` 1

```{r}
#| echo: true
summarize(table1_new, across(c(cases, population), mean))
```

## `across()` 2

```{r}
#| echo: true
table1_new |> 
  group_by(year) |> 
  summarize(
    across(
      c(cases, population, rate),
      mean,
      .names = "mean_{.col}"
    )
  )
```
:::

# [다중 테이블 결합]{style="color:coral"}

## 종류

-   테이블 조인(join): 두 개 데이터 프레임을 공통키(common key)를 이용해 결합함으로써 하나의 데이터 프레임을 생성

-   테이블 병합(merge): 두 데이터 프레임을 결합해 새로운 단일한 프레임을 생성한다는 의미에서는 테이블 조인과 동일하지만, 공통키가 없으며, 행과 열 중 하나는 반드시 동일해야 함.

## 테이블 조인: 키(key)

![](images/clipboard-1575493085.png)

## 테이블 조인: 유형

-   [`left_join()`](https://dplyr.tidyverse.org/reference/mutate-joins.html): 첫 번째 테이블은 그대로 둔 상태에서 두 번째 테이블을 결합함으로써 두 번째 테이블의 열을 가져옴

-   [`right_join()`](https://dplyr.tidyverse.org/reference/mutate-joins.html): 두 번째 테이블은 그대로 둔 상태에서 첫 번째 테이블을 결합함으로써 첫 번째 테이블의 열을 가져옴

-   [`inner_join()`](https://dplyr.tidyverse.org/reference/mutate-joins.html): 두 테이블 모두에 존재하는 열을 취함

-   [`full_join()`](https://dplyr.tidyverse.org/reference/mutate-joins.html): 최소한 한 테이블에 존재하는 열을 모두 취함

-   [`semi_join()`](https://dplyr.tidyverse.org/reference/filter-joins.html): 첫 번째 테이블의 행 중 두 번째 테이블에 대응하는 행이 있는 것만 취함

-   [`anti_join()`](https://dplyr.tidyverse.org/reference/filter-joins.html): 첫 번째 테이블의 행 중 두 번째 테이블에 대응하는 행이 없는 것만 취함

## 테이블 조인: 유형

![](images/clipboard-1394869847.png){fig-align="center"}

## 테이블 조인: 유형

::: {layout="[45, -5, 45]" layout-valign="center"}
![](images/clipboard-3276497169.png)

![](images/clipboard-1577298199.png)
:::

## 테이블 조인: 유형

::: {layout="[45, -5, 45]" layout-valign="center"}
![](images/clipboard-2197162614.png){fig-align="center"}

![](images/clipboard-2555805146.png){fig-align="center"}
:::

## 테이블 병합: 주요 함수

-   `bind_row()`: 컬럼이 동일한 두 테이블을 상하로 연결
-   `bind_col()`: 행이 동일한 두 테이블을 좌우로 연결

## 테이블 병합: 주요 함수

::: panel-tabset
## bind_row 1

```{r}
#| echo: true
library(tidyverse)
library(gapminder)
gap_1957 <- gapminder |> filter(year == 1957)
gap_1982 <- gapminder |> filter(year == 1982)
gap_2007 <- gapminder |> filter(year == 2007)
```

## bind_row 2

```{r}
#| echo: true
gapminder_merge_row <- bind_rows(
  gap_1957, gap_1982, gap_2007
)
gapminder_merge_row
```

## bind_col 1

```{r}
#| echo: true
gap_var1 <- gapminder |> select(country, continent, year)
gap_var2 <- gapminder |> select(lifeExp, pop, gdpPercap)
```

## bind_col 2

```{r}
#| echo: true
gapminder_merge_col <- bind_cols(gap_var1, gap_var2)
gapminder_merge_col
```
:::
